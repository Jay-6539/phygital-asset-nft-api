//
//  AssetHistoryView.swift
//  Phygital Asset
//
//  Created by AI Assistant on 2024
//

import SwiftUI
import CoreLocation

struct AssetHistoryView: View {
    let targetBuilding: Treasure?
    let nfcCoordinate: CLLocationCoordinate2D?
    let nfcUuid: String? // Êñ∞Â¢ûÔºöNFC UUID
    let onBackToNavigation: () -> Void
    let onShowNFCMismatch: () -> Void
    let onStartCheckIn: (String) -> Void // ÂêØÂä®Check-inÁöÑÂõûË∞É
    let currentUsername: String? // ÂΩìÂâçÁî®Êà∑Âêç
    
    @State private var isFirstRegistration: Bool = false
    @State private var isCheckingHistory: Bool = true
    
    var body: some View {
        // Ê£ÄÊü•ÂùêÊ†áÂåπÈÖç
        Group {
            if let building = targetBuilding, let nfcCoord = nfcCoordinate {
                // Ë∞ÉËØïÊó•Âøó
                let _ = {
                    Logger.debug("üîç AssetHistoryView ÊòæÁ§∫ÈÄªËæëÂà§Êñ≠:")
                    Logger.debug("   isCheckingHistory: \(isCheckingHistory)")
                    Logger.debug("   isFirstRegistration: \(isFirstRegistration)")
                }()
                
                if isCheckingHistory {
                    // Ê≠£Âú®Ê£ÄÊü•ÂéÜÂè≤ËÆ∞ÂΩï
                    VStack(spacing: 16) {
                        ProgressView()
                            .scaleEffect(1.5)
                        Text("Checking history...")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                    .background(Color.black.opacity(0.3))
                } else if isFirstRegistration {
                    // üÜï Á¨¨‰∏ÄÊ¨°Ê≥®ÂÜåÔºåË∑≥ËøáGPSÊ£ÄÊü•ÔºåÁõ¥Êé•ÊòæÁ§∫ÂéÜÂè≤Ê°Ü
                    let _ = Logger.success("‚úÖ ÊòæÁ§∫ÂéÜÂè≤Ê°ÜÔºàÁ¨¨‰∏ÄÊ¨°Ê≥®ÂÜåÔºåÂ∑≤Ë∑≥ËøáGPSÊ£ÄÊü•Ôºâ")
                    AssetHistoryModal(
                        building: building, 
                        onBack: onBackToNavigation,
                        onStartCheckIn: onStartCheckIn,
                        nfcUuid: nfcUuid,
                        currentUsername: currentUsername
                    )
                } else if isCoordinateMatch(building: building, nfcCoordinate: nfcCoord) {
                    // ÂùêÊ†áÂåπÈÖçÔºåÊòæÁ§∫Ê≠£Â∏∏ÁöÑÂéÜÂè≤‰ø°ÊÅØÊ°Ü
                    let _ = Logger.success("‚úÖ ÊòæÁ§∫ÂéÜÂè≤Ê°ÜÔºàGPSÂùêÊ†áÂåπÈÖçÔºâ")
                    AssetHistoryModal(
                        building: building, 
                        onBack: onBackToNavigation,
                        onStartCheckIn: onStartCheckIn,
                        nfcUuid: nfcUuid,
                        currentUsername: currentUsername
                    )
                } else {
                    // ÂùêÊ†á‰∏çÂåπÈÖçÔºåÊòæÁ§∫ÈîôËØØ‰ø°ÊÅØ
                    let _ = Logger.error("‚ùå ÊòæÁ§∫GPSÈîôËØØÊ°ÜÔºàÂùêÊ†á‰∏çÂåπÈÖçÔºâ")
                    NFCErrorModal(onBack: onBackToNavigation)
                }
            } else {
                // Êé¢Á¥¢Ê®°ÂºèÔºöÊ≤°Êúâ targetBuildingÔºåÁõ¥Êé•ÊòæÁ§∫ÂéÜÂè≤ËÆ∞ÂΩï
                let _ = Logger.debug("üîç Êé¢Á¥¢Ê®°ÂºèÔºötargetBuilding = nilÔºåÁõ¥Êé•ÊòæÁ§∫ÂéÜÂè≤ËÆ∞ÂΩï")
                AssetHistoryModal(
                    building: targetBuilding, 
                    onBack: onBackToNavigation,
                    onStartCheckIn: onStartCheckIn,
                    nfcUuid: nfcUuid,
                    currentUsername: currentUsername
                )
            }
        }
        .onAppear {
            Logger.debug("üèõÔ∏è AssetHistoryView Â∑≤ÊòæÁ§∫")
            Logger.debug("   targetBuilding: \(targetBuilding?.name ?? "nil")")
            Logger.debug("   nfcCoordinate: \(nfcCoordinate != nil ? "ÊúâÂùêÊ†á" : "nil")")
            Logger.debug("   nfcUuid: \(nfcUuid ?? "nil")")
            
            // Ê£ÄÊü•ÊòØÂê¶‰∏∫Á¨¨‰∏ÄÊ¨°Ê≥®ÂÜå
            if let building = targetBuilding {
                Task {
                    do {
                        let existingCheckIns = try await BuildingCheckInManager.shared.getCheckIns(for: building.id)
                        await MainActor.run {
                            isFirstRegistration = existingCheckIns.isEmpty
                            isCheckingHistory = false
                            
                            if isFirstRegistration {
                                Logger.success("üÜï Á¨¨‰∏ÄÊ¨°Ê≥®ÂÜåÊ≠§Âª∫Á≠ëÔºåË∑≥ËøáGPSË∑ùÁ¶ªÊ£ÄÊü•")
                            } else {
                                Logger.debug("üìã Âª∫Á≠ëÂ∑≤Êúâ \(existingCheckIns.count) Êù°ËÆ∞ÂΩïÔºåÂ∞ÜËøõË°åGPSÈ™åËØÅ")
                            }
                        }
                    } catch {
                        Logger.error("‚ùå Ê£ÄÊü•ÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•: \(error.localizedDescription)")
                        // Â§±Ë¥•Êó∂ÈªòËÆ§Ë∑≥ËøáGPSÊ£ÄÊü•
                        await MainActor.run {
                            isFirstRegistration = true
                            isCheckingHistory = false
                        }
                    }
                }
            } else {
                isCheckingHistory = false
            }
        }
    }
    
    // Ê£ÄÊü•ÂùêÊ†áÊòØÂê¶ÂåπÈÖçÔºàË∑ùÁ¶ªÂ∞è‰∫é30Á±≥Ôºâ
    private func isCoordinateMatch(building: Treasure, nfcCoordinate: CLLocationCoordinate2D) -> Bool {
        let buildingLocation = CLLocation(latitude: building.coordinate.latitude, longitude: building.coordinate.longitude)
        let nfcLocation = CLLocation(latitude: nfcCoordinate.latitude, longitude: nfcCoordinate.longitude)
        let distance = buildingLocation.distance(from: nfcLocation)
        
        Logger.location("üìç Coordinate match check:")
        Logger.debug("   Building: \(building.name) - \(building.coordinate)")
        Logger.debug("   NFC: \(nfcCoordinate)")
        Logger.debug("   Distance: \(String(format: "%.2f", distance)) meters")
        Logger.debug("   isFirstRegistration: \(isFirstRegistration)")
        Logger.debug("   Match: \(distance < 40.0 ? "‚úÖ YES" : "‚ùå NO") (< 40m)")
        
        return distance < 40.0 // Â∞è‰∫é40Á±≥
    }
}
